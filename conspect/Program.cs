//2 вида разных переменных типа string
/* string name;
string Name; */
/* string name;
name = "Tom";
System.Console.WriteLine(name); */
//пример инициализации(когда сразу при определении испольузется присваивание значения переменной)
/* string Name = "Tedd";
System.Console.WriteLine(Name); */
//пример того, как значение переменной можно менять многократно
/* System.Console.WriteLine("Введите имя:");
string name = "Monica";
System.Console.WriteLine(name);
name = "Edvard";
System.Console.WriteLine(name);
name = "Tom";
System.Console.WriteLine(name);
name = "Anastasiya";
System.Console.WriteLine(name); */
//КОНСТАНТЫ
//обозначаются словом 'const' перед типом данных. всегда неизменны
/* const string name = "Tom";
System.Console.WriteLine(name); */

//Литералы
//Литералы - это неизменяемые значения, или константы
//Можно передавать литералы переменными в качестве значения
//Виды литералов
/* Логический
Целочисленный
Вещественный
Символический
Строчный
Отдельный литерал Null */

//Логические литералы:
//true(истина)/false(ложь)
//передается как System.Console.WriteLine(true);

//Целочисленные литералы:
//положительные/отрицательные (-10, -22, 20, 52)
//могут быть выражены в десятиченой, шестнадцатиричной и двоичной системах
//передается как Console.WriteLine(505);

//Вещественные литералы(дробные числа)
//с фиксированной запятой/с плавающей запятой(в экспоненциальной форме)

//пример литерала с фиксированной запятой: 
//System.Console.WriteLine(3.14);

//пример литерала с плавающей запятой: 
//Console.WriteLine(3.2e3);   // по сути равно 3.2 * 10<sup>3</sup> = 3200

//экспонентальная запись
//(-1)S x 1.M x 10^E
// где 
// S - знак числа
// M мантисса(дробная часть числа, перед которой всегда стоит 1)
// E (степень основания) //пишется в двоичном виде
// есть правило - на сколько знаков сместили - такая и степень. 
//сторона смещения имеет значение для постановки знака у числа
//то есть оно может быть либо положительным, либо отрицательным

//Символьные литералы
//это одиночные символы, заключенные в одиночные кавычки
//пример: Console.WriteLine('A');

//Управляющие последовательности
//Они показывают символ перед, которым ставится слэш
//Пример: '\n' - перевод строки на новую, '\t' - табуляция, '\' - слэш
//Таким образом, компилятор работает с последовательностью как с функцией

//также есть последовательности на кодировке ASCII 
//Пример, литерал '\x78' представляет символ "x":
//Console.WriteLine('\x78');    // x

// и кодировке unicode 
//Console.WriteLine('\u0421');    // С

//Строковые литералы
//это строки, заключающиеся в " "
//Если внутри обозначения нужно обозначить кавычки, то надпись обрамляется обратным слэшем
//Console.WriteLine("Компания \"Ёлки-иголки\"");

//Также можно использоваться управляющие последовательности
//Console.WriteLine("Hello \nworld");
//здесь world будет перенесен на следующую строку

//Null 
//это ссылка, не указывающая ни на какой объект, то есть отсутствие значения